name: CI

on:
  workflow_dispatch:
    branches: [master]
  schedule:
    - cron: "0 8 * * *"
  push:
    branches: [master, ci-test*]
  pull_request:
    branches: [stable, master, release-*]

jobs:
  lint:
    runs-on: ubuntu-latest
    env:
      min-python-version: "3.10"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          submodules: true

      - name: Set up Python ${{ env.min-python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.min-python-version }}

      - id: get_date
        name: Get date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Set up Poetry cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('**/poetry.lock') }}-${{ steps.get_date.outputs.date }}

      - name: Install dependencies
        run: |
          poetry install

      - name: Lint with flake8
        run: poetry run flake8

      - name: Check black formatting
        run: poetry run  black . --check
        if: success() || failure()

      - name: Check isort formatting
        run: poetry run  isort . --check
        if: success() || failure()

      - name: Check mypy formatting
        run: poetry run mypy --ignore-missing-imports .
        if: success() || failure()

      - name: Check for unused imports and pass statements
        run: |
          cmd="poetry run autoflake --remove-all-unused-imports --recursive --ignore-init-module-imports --ignore-pass-after-docstring agbenchmark"
          $cmd --check || (echo "You have unused imports or pass statements, please run '${cmd} --in-place'" && exit 1)
        if: success() || failure()

  tests:
    name: ${{ matrix.agent-name }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    spec:
      resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
              - NET_ADMIN
    env:
      min-python-version: "3.10"
    strategy:
      fail-fast: false
      matrix:
        agent-name:
          - "smol-developer"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          submodules: true

      - name: Set up Python ${{ env.min-python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.min-python-version }}

      - id: get_date
        name: Get date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Set up Poetry cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('**/poetry.lock') }}-${{ steps.get_date.outputs.date }}

      - name: Install dependencies
        run: |
          poetry install
          poetry run agbenchmark start --mock
          poetry run agbenchmark start --mock --maintain
          poetry build

      - name: Run regression tests
        run: |
          cd agent/$AGENT_NAME
          if [ "$AGENT_NAME" == "gpt-engineer" ]; then
            make install
            source venv/bin/activate
          elif [ "$AGENT_NAME" == "Auto-GPT" ]; then
            python -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt
          elif [ "$AGENT_NAME" == "mini-agi" ]; then
            python -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt
            cp .env_example .env
          elif [ "$AGENT_NAME" == "smol-developer" ]; then
            python -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt
          elif [ "$AGENT_NAME" == "SuperAGI" ]; then
            cp config_template.yaml config.yaml
            sed -i 's/OPENAI_API_KEY:.*/OPENAI_API_KEY: "'"${{ secrets.OPENAI_API_KEY }}"'"/' config.yaml
            docker-compose up -d --build
          else
            echo "Unknown agent name: $AGENT_NAME"
            exit 1
          fi

          pip install ../../dist/*.whl

          if [ "${GITHUB_EVENT_NAME}" == "schedule" ] || [ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]; then
            echo "Creating required directories and files..."
            mkdir -p ~/.helicone
            touch ~/.helicone/proxy_pid
            touch ~/.helicone/mitmproxy.log
            export HELICONE_API_KEY=sk-tm2og4a-7msunia-tqbcuxq-bhbkfha
            export HELICONE_CACHE_ENABLED=true
            echo "Starting the proxy..."

            # Install necessary packages
            echo "Step 1: Installing necessary packages..."
            sudo apt update
            sudo apt install -y curl ca-certificates mitmproxy
            sudo apt install iptables

            # Add to /etc/hosts
            echo "Step 2: Adding entry to /etc/hosts..."
            echo '127.0.0.1 api.openai.com' | sudo tee -a /etc/hosts

            # Create the add_headers.py file
            echo "Step 3: Creating add_headers.py file..."
            echo 'import os' > add_headers.py
            echo 'def request(flow):' >> add_headers.py
            echo '    flow.request.headers["Helicone-Auth"] = "Bearer " + os.environ.get("HELICONE_API_KEY")' >> add_headers.py

            echo "Step 3.5: Setting up port forwarding..."
            sudo iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-port 8443

            # Start a reverse proxy and save its PID
            echo "Step 4: Starting a reverse proxy and saving its PID..."
            nohup mitmweb --mode reverse:https://oai.hconeai.com:443 --listen-port 8443 -s add_headers.py | tee -a ~/.helicone/mitmproxy.log 2>&1 &
            echo $! | tee -a ~/.helicone/proxy_pid
            echo "Proxy started.... sleeping 20 seconds"
            sleep 20
            echo "Done sleeping."
            cat ~/.helicone/mitmproxy.log

            echo  "FINDING MITMPROXY CERTIFICATE"
            find ~ -name 'mitmproxy-ca-cert.pem'
            sudo find ~ -name 'mitmproxy-ca-cert.pem'
            echo  "DONE FINDING MITMPROXY CERTIFICATE"


            # Install the mitmproxy certificate
            echo "Step 5: Installing the mitmproxy certificate..."
            # Note: Run mitmproxy once if the certificate does not exist
            USER_HOME=$HOME
            sudo cp $USER_HOME/.mitmproxy/mitmproxy-ca-cert.pem /usr/local/share/ca-certificates/mitmproxy-ca-cert.crt
            sudo update-ca-certificates

            # Append the mitmproxy certificate to the curl certificate bundle
            echo "Step 6: Appending the mitmproxy certificate to the curl certificate bundle..."
            sudo bash -c "cat $USER_HOME/.mitmproxy/mitmproxy-ca-cert.pem >> /etc/ssl/certs/ca-certificates.crt"

            echo "Setup complete. Please manually install the mitmproxy certificate in your browser."
            agbenchmark start --maintain
            

          else
            agbenchmark start --maintain --mock
            agbenchmark start --improve --mock
            agbenchmark start --mock
            agbenchmark start --mock --category=retrieval
          fi
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AGENT_NAME: ${{ matrix.agent-name }}
          PROMPT_USER: false # For mini-agi. TODO: Remove this once mini-agi follows the standards.
          HELICONE_API_KEY: ${{ secrets.HELICONE_API_KEY }}
          REQUESTS_CA_BUNDLE: /etc/ssl/certs/ca-certificates.crt

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: gpt-engineer-projects
          path: agent/gpt-engineer/projects
